from Crypto.Util import number

e = 65537
n = 0xb597a9e0a948b43b8ae712c0d8ac0fb04121bd0b54082217d4970e03eece4ed7c32d006f051c2be51511a51c7522f36c255a9a9eb72975ac9f253f8128b246f5a3bf6c7591889fc751dac1183e083f0215cf36faa05fd401e1360c206113626771a67485ada2b5024fd6f4820b5968be8c9505d22ebe552d43e328a40709f7e4716b4e54ae10b14e98cbfb4585953397c32cb92d6c216259eee660f2d87455c28b18e0779ce94a0cec8c35580ee9baa46ce12f0ec904b97ba696d4a3a0aeb5015a990c36064069bd0f09275820d374f75f2d9f2b93e7abaec69a51b3bdaf27b171d71608a4e0723b4211f5168c718d659778f308b8e3bf84920237ce052c8acd
flag = 0x6183f9abb313b98c4c9f48fc8f49c41b2bb6fdf0c0d965ec9213b455c7eaa0a91f174cbe294df51a49e33598a0b894628f6f4d6404871d5218c3d9ead5b0492aedbf0c1207d5dc4eb4ded2b6169491e7ba16827bbbbb3782ed6b10ecd163b9641dfceceb0f28109591c0c1454796e3be7cc49818c924d4aaf5bf2a00fd4c053347e88a10ce6cae8fff76d536a714cb56e3cc93b43fa87dca64e1f5a9427b2ed3ec001fc4f61e220255cd7911f929d0b8d837ebdbc09da6586ba741d30ac3e343776511722332f5ab1199121ae13bb928d16458ba3c8ff9dd055394c96e690815a06f8becd4e4d5ab7c8c79c37c40452c5e55f6bb2e82a9256c588fd306e1928e
incompleteP = 0xb8c8db256ec4edd2625c97a87ef3662ca5d325b835c25371287df2d33818aa5da70314eec5d19ad55d48aa616dd2569080d74a7a958a52014eef5c7a7ec599c419db2bbccaab32d547ea5380a254c976a2917eb9428860e4e5f8a2d389837d55cd060f7b4f463c30bf7da417ead82643161a798ec770ca2fe0688040d6d0a000
q = 0

for i in range(0x1000):
    p = incompleteP | i
    if number.isPrime(p):
        if n%p == 0:
            q = n//p
            phiN = (p-1)*(q-1)
            d = pow(e, -1, phiN)
            decryptedFlag = pow(flag, d, n)
            byteString = decryptedFlag.to_bytes(decryptedFlag.bit_length() + 7, 'big')
            decodedString = byteString.decode('utf-8')
            print(decodedString)



